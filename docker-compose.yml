services:
  flask-api:
    build: .
    container_name: flask-api
    ports:
      - "5000:5000"
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongo:27017/customer_support
    volumes:
      - .:/app

  mongo:
    image: mongo:latest
    container_name: mongo-container
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  mongo-setup:
    build: .
    command: python mongo_setup.py
    depends_on:
      - mongo
    volumes:
      - .:/app

  dd-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: dd-agent
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=${DD_SITE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro

volumes:
  mongo_data:

# best practice: after making changes to the docker-compose.yml file, it's a good idea to clean up existing containers and volumes to ensure a fresh start
# this will help avoid any conflicts or leftover data from previous builds
# to do this, use the following command to stop and remove all containers, volumes, and any orphan containers:
  # Use "docker-compose down -v --remove-orphans" when you need a completely clean slate and don't mind losing data stored in volumes.

  # or less aggressive to allow data to persist:
  #  docker-compose down

# then, use the following command to build and run the containers:
  #  docker-compose up --build  

# to check the status of the containers:
  #  docker-compose ps